// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]   @relation("UserTasks")

  @@map("users")
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      TaskStatus  @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation("UserTasks", fields: [userId], references: [id])

  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Room {
  id          String   @id @default(cuid())
  name        String
  description String?
  floor       String?
  type        RoomType @default(OTHER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       CleaningTask[]
  schedules   RoomSchedule[]

  @@map("rooms")
}

enum RoomType {
  OFFICE
  MEETING_ROOM
  BATHROOM
  KITCHEN
  LOBBY
  STORAGE
  BEDROOM
  LOUNGE
  OTHER
}

model CleaningTask {
  id                String   @id @default(cuid())
  taskDescription   String
  frequency         String
  estimatedDuration String
  status           String   @default("pending")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  roomId           String?
  room             Room?    @relation(fields: [roomId], references: [id])

  @@map("cleaning_tasks")
}

model Schedule {
  id          String   @id @default(cuid())
  title       String
  tasks       ScheduleTask[]
  rooms       RoomSchedule[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("schedules")
}

model ScheduleTask {
  id              String   @id @default(cuid())
  description     String
  frequency       String?
  additionalNotes String?
  scheduleId      String
  schedule        Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("schedule_tasks")
}

model RoomSchedule {
  id              String            @id @default(cuid())
  roomId          String
  room            Room              @relation(fields: [roomId], references: [id], onDelete: Cascade)
  scheduleId      String
  schedule        Schedule          @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  frequency       ScheduleFrequency
  startDate       DateTime          @default(now())
  lastCompleted   DateTime?
  nextDue         DateTime
  status          ScheduleStatus    @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  completionLogs  RoomScheduleCompletionLog[]

  @@unique([roomId, scheduleId])
  @@map("room_schedules")
}

model RoomScheduleCompletionLog {
  id              String       @id @default(cuid())
  roomScheduleId  String
  roomSchedule    RoomSchedule @relation(fields: [roomScheduleId], references: [id], onDelete: Cascade)
  completedAt     DateTime     @default(now())
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("room_schedule_completion_logs")
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum ScheduleStatus {
  PENDING
  OVERDUE
  COMPLETED
  PAUSED
}
