// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tasks         Task[]    @relation("UserToTask")
  notifications Notification[]
}

model Building {
  id            String    @id @default(uuid())
  name          String
  address       String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  rooms         Room[]
}

model Room {
  id            String    @id @default(uuid())
  name          String
  building_id   String
  building      Building  @relation(fields: [building_id], references: [id])
  floor         String
  status        String    @default("pending")
  last_cleaned  DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  tasks         Task[]
  cleaning_sheets CleaningSheet[]
  documents     Document[]
}

model TaskTemplate {
  id          String    @id @default(uuid())
  name        String
  description String?
  tasks       Task[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model Task {
  id            String    @id @default(uuid())
  name          String
  description   String?
  status        String    @default("pending")
  priority      String    @default("normal")
  due_date      DateTime?
  completed_at  DateTime?
  room_id       String
  room          Room      @relation(fields: [room_id], references: [id])
  template_id   String?
  template      TaskTemplate? @relation(fields: [template_id], references: [id])
  staff         Staff?    @relation("StaffToTask", fields: [staff_id], references: [id])
  staff_id      Int?
  cleaning_sheet CleaningSheet? @relation(fields: [cleaning_sheet_id], references: [id])
  cleaning_sheet_id String?
  user          User?     @relation("UserToTask", fields: [user_id], references: [id])
  user_id       String?
  document      Document? @relation(fields: [document_id], references: [id])
  document_id   String?
}

model Document {
  id          String    @id @default(uuid())
  name        String
  type        String    // "cleaning_sheet", "report", "other"
  url         String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  room_id     String
  room        Room      @relation(fields: [room_id], references: [id])
  tasks       Task[]
}

model Notification {
  id          String   @id @default(uuid())
  title       String
  message     String
  read        Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
}

model Staff {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  role          String
  status        String    @default("active")
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relationships
  tasks         Task[]    @relation("StaffToTask")
  cleaning_sheets CleaningSheet[] @relation("StaffToCleaningSheet")

  @@map("staff")
}

model CleaningSheet {
  id            String    @id @default(uuid())
  name          String
  type          String    // "cleaning_sheet", "report", "other"
  url           String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  room_id       String
  room          Room      @relation(fields: [room_id], references: [id])
  tasks         Task[]
  staff         Staff?    @relation("StaffToCleaningSheet", fields: [staff_id], references: [id])
  staff_id      Int?
} 